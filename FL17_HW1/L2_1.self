https://drive.google.com/file/d/1XR_UPXrLSxQorkJbv5o-9tLK-R_oHJIi/view

https://elearn.epam.com/courses/course-v1:EPAM+RD3+0821/courseware/b98a983ab3ff4605853300b89c9205b6/e0839a589ef7439dbcc2046a9c1d6311/4?activate_block_id=block-v1%3AEPAM%2BRD3%2B0821%2Btype%40vertical%2Bblock%40bcbf8b6a4109478f952da168cc1f558d

L2.0
Контентные модели — это набор правил, которые описывают контекст, в котором можно использовать элемент и ожидаемое содержимое элемента. 

Flow content — контент потока, к которому относится большинство элементов, используемых в основной части документов или веб-приложений.
Например: <article>, <aside> и др.

Interactive content - интерактивный контент, который предполагат взаимодействие с пользователем.
Например: <label>, <select>, <textarea>, <video> (если присутствует атрибут controls).

Metadata content — контент метаданных. К нему относится контент, устанавливающий представление или поведение остальной части контента или устанавливающий взаимосвязь HTML-документа с другими документами (например, с таблицами стилей css), а также отвечающий за внешний вид или поведение контента на странице.
Например: <link>, <meta> и др.

Phrasing content — текстовый контент. Текстовое содержимое представлено элементами для разметки текста внутри абзацев.
Например: <b>, <bdi>, <bdo>, <br>, <button> и др.

Embedded content — встроенный контент, который импортируется в документ из других источников, другого языка разметки или другого пространства имён.
Например: <audio>, <iframe>, <img> и др.

Heading content — контент, содержащий заголовки. Определяет заголовки разделов.
Например: <h1>, <h2>, <h3>.

Sectioning content — контент, который представляет собой секции страницы. Определяется областью заголовков и колонтитулов.
Например: <article>, <aside>, <nav>, <section>.

тег — это элемент гипертекстовой разметки, выполняющий свою функцию.

Создание открывающего тега. Для этого используется знак "<", затем указывается имя элемента (список символов без пробела), затем через пробел возможны атрибуты и завершается процесс создания тега знаком ">".

Создание контента элемента. Элемент может содержать контент — данные, которые добавляются между открывающим и закрывающим тегом. Если контент не вводить, тогда элемент будет пустым.

Создание закрывающего тега. Он начинается с ввода знаков "</", затем указывается то же имя элемента, что и в открывающем теге, и завершается ввод с помощью символа ">".

HTML-атрибуты сообщают браузеру каким образом должен отображаться тот или иной элемент страницы. Атрибуты задают элементам дополнительные свойства и расширяют возможности. 
тег img добавляет на страницу картинку;
атрибут src указывает путь, где лежит файл с картинкой;
атрибут alt задает альтернативный контент;
атрибуты width и height задают размер картинки при загрузке, указываются без единиц измерения.
логический атрибут controls добавляет кнопки управления к проигрывателю. Если этот атрибут отсутствует, у аудиопроигрывателя кнопок управления не будет

Порядок атрибутов в элементе не имеет значения и на результат отображения элемента не влияет.

Для чего же нужен атрибут accesskey? С помощью атрибута accesskey, можно получить доступ к элементу, при помощи клавиатуры, используя сочетания клавиш. Обычно этот атрибут применяется для ссылок, кнопок и полей формы. Например, если задано accesskey="S", то в различных браузерах для него работают сочетания клавиш, представленные на картинке.

Чаще всего, при использовании комбинации клавиш, элемент получает фокус, но конкретное действие зависит от свойств элемента. Например:
для элемента <a> произойдёт переход по ссылке;
для текстовых полей можно вводить текст;
для флажков (<input type="checkbox">) будет поставлена галочка и т. д.

Атрибут lang
Глобальный атрибут lang указывает язык, на котором написан текст внутри текущего элемента. Помните, что хорошей практикой является использовать этот атрибут для элемента html. Браузер будет использовать значение атрибута lang для правильного отображения некоторых символов.
Также использование атрибута lang помогает системам перевода определить, какие языковые правила нужно использовать, а программам чтения - правильно выбрать язык озвучивания контента. 

Атрибут class
Позволяет установить стилевой класс, который связывает нужный элемент со стилевым оформлением. Для этого атрибута можно указывать несколько значений, разделяя их пробелом.

Атрибут data-*
Нужен для создания пользовательских атрибутов, для хранения любой информации. Данные могут быть получены с помощью скриптов или через функцию attr(). Имя атрибута должно обязательно начинаться с data-, дальше произвольное название латинскими буквами.

L2,1
href Показывает путь к связываемому файлу (обязательный атрибут)
media Определяет устройство, для которого следует применять стилевое оформление
type MIME-тип данных подключаемого файла
rel Определяет отношения между текущим документом и файлом, на который делается ссылка

Элемент <title> обозначает заголовок документа. При этом <title> — это не часть документа, он не отображается напрямую на веб-странице. Текст, который находиться в этом элементе, отображается на вкладке браузера.

Элемент <meta> содержит данные (метатеги), которые нужны для хранения информации, необходимой для браузеров и поисковых систем. Так, например, поисковые системы обращаются к метатегам, чтобы получить описание сайта, ключевые слова и другие данные.

charset Задаёт кодировку документа
content Устанавливает значение атрибута, заданного с помощью name или http-equiv
http-equiv Позволяет изменять поведение серверов и пользователей
name Имя метатега, также косвенно устанавливает его предназначение

Атрибут name может принимать значения application-name, author, description, keywords, viewport и другие.
Расмотрим подробнее <meta name="viewport">.
Тег <meta> с атрибутом name="viewport" нужен для корректного отображения веб-страницы на смартфонах, планшетах и других устройствах, имеющих высокую плотность пикселей (>200ppi). Этот метатег чаще применяется для адаптивных сайтов, но с его помощью так же можно улучшить представление веб-страницы, имеющей фиксированную или гибкую разметку. Особенности адаптации веб-страниц для просмотра на разных устройствах мы будем рассматривать далее в этом курсе.

Viewport — это область на экране устройства, которая видна пользователю без прокрутки экрана.

width=device-width
width=800px
initial-scale=1
minimal-scale,maximal-scale,user-scale


Элемент <body> состоит из двух тегов <body>…</body> и контента между ними. Элемент <body> нужен для хранения содержимого веб-страницы, которое отображается в окне браузера. Контент, который нужно выводить в документе, располагают внутри этого  контейнера. К такому содержимому относится текст, изображения, теги, скрипты JavaScript и т. д.

L2.2

Семантические элементы (семантические теги) позволяют указать роль контента на странице. Эта дополнительная информация помогает роботам/индексаторам, таким как Google и Bing, лучше понять какой контент важен, какой является второстепенным, какой используется для навигации и так далее. Добавляя семантические элементы на веб страницу, вы даете дополнительные данные, которые помогают поисковикам понимать роли и относительную важность разных частей веб страницы. Кроме того, семантические теги дают возможность программам чтения с экрана выделять важный контент на странице и отображать его. Таким образом контент становится еще более доступным для разных категорий пользователей.

Элемент <header> предназначен для того, чтобы содержать заголовок раздела. Кроме этого, <header> можно использовать для обертывания оглавления раздела, формы поиска или любых соответствующих логотипов. В одном документе разрешается определять несколько элементов <header>.
<header class="header">
    <h1 class="logo">
        <a href="#"><img src="logo.png" alt="Логотип компании"></a>
    </h1>
    
Для указания времени в примере использован тег <time>, который также является семантическим.

Элемент <nav> представляет собой раздел страницы, который ссылается на другие страницы или их части. То есть это раздел с навигационными ссылками.
НЕ ВСЕ ссылки в документе следует размещать внутри элемента <nav>.
Элемент <nav> предназначен только для основного блока навигационных ссылок, например, главного меню сайта. Допускается использовать блок <nav> для навигации по странице.

Элемент <aside> представляет собой раздел страницы, состоящий из контента, который косвенно связан с контентом вокруг элемента <aside> и который может считаться отдельным от этого контента. Такие разделы часто представлены как боковые панели, содержащие блоки рекламы, виджеты социальных сетей, группы элементов навигации и другого контента. Контент внутри элемента <aside> должен соотноситься с окружающим контентом.

Элемент <main> представляет собой основное содержимое документа. Содержимое должно быть уникальным и не включать типовые блоки вроде шапки сайта, подвала, навигации, боковой панели, формы поиска и т. п. В документе не должно быть более одного элемента <main>.

Элемент <article> определяет независимый, самодостаточный контент. Это может быть сообщение на форуме, статья, запись в блоге, пользовательский комментарий и другое. Контент, помещенный в этот элемент, должен иметь смысл сам по себе, т. е. должен быть понятен в отрыве от остальных частей веб-сайта. Может дублироваться на других страницах сайта и содержать внутри другие элементы <article>.
Элемент должен иметь в качестве дочернего (вложенного) элемента заголовок от <h1> до <h6>.

Элемент <section> представляет собой общий раздел документа. В соответствии со спецификацией W3C по HTML5: "Раздел (section) — это тематически сгруппированный контент, как правило с заголовком."
Например. Домашняя страница сайта компании содержит такие блоки: Наши преимущества, Наши клиенты, Наша команда
Обычно такие блоки оформляются с помощью элемента <section>. Элемент <section> должен иметь в качестве дочернего (вложенного) элемента заголовок от <h1> до <h6>.
Родительские элементы <section> можно создавать с одним или несколькими вложенными элементами <article>.

Элемент <footer> определяет "подвал" документа или раздела и должен содержать информацию о содержащем его элементе. Обычно в "подвале" размещают информацию об авторе документа, ссылки на условия использования текста, информацию об авторских правах, контактные данные 
В одном документе разрешается определять несколько элементов <footer>. В элементе <footer> допускается размещать элемент <nav>.

L2.3  HTML Links, Images, Text, Symbols

Ссылка — это связь между двумя ресурсами, один из которых — текущий документ. В HTML для создания ссылки можно использовать теги: <a>, <area> и <link>. Чаще всего используются теги <a> и <link>. Элемент <area> нужен для создания ссылки с части изображения

В указанном примере тег <link> используется для подключения двух файлов: файла стилей style.css и файла favicon.ico — файла иконки, которая отображается во вкладке браузера рядом с названием страницы.

Тег <link> используется совместно с такими атрибутами:
href Содержит адрес файла.
rel Определяет связь между элементами. Значения атрибута определяются стандартом.
type Определяет тип содержимого для тега <link>.

Гиперссылки
Для создания гиперссылки необходимо использовать парный тег <a>…</a>. В качестве содержимого в тег помещается контент, который будет отображаться на веб-странице. Текст ссылки по умолчанию отображается в браузере с подчёркиванием, цвет шрифта — синий, при наведении на ссылку курсор мыши меняет вид. Обязательным параметром тега <a> является атрибут href, который задает URl-адрес веб-страницы.

Атрибут target определяет, где показать содержимое после перехода по ссылке. Атрибут target принимает такие значения:
_self загружает документ в текущей вкладке. Является значением по умолчанию.
_blank загружает документ в новой вкладке.
_parent загружает документ в родительской вкладке.
_top в HTML5 загружает в окне высшего уровня. Если родителя нет, ведёт себя как _self.

Якорь или внутренняя ссылка — это ссылка, которая помогает создавать переходы на разные разделы текущей веб-страницы. Это позволяет быстро переходить от раздела к разделу. Использование якорей удобно, когда на странице много контента.
Внутренние ссылки также нужно создавать с помощью тега <a>. Отличие заключается в том, что атрибут href содержит имя указателя — так называемый якорь, а не URl-адрес. Перед именем указателя всегда ставится знак #.

Изображения, атрибуты
Использование графических изображений делает веб-страницы более привлекательными визуально. Благодаря изображениям лучше передается суть и содержание веб-документа. Что же нужно сделать, чтобы добавить картинку?

Для добавления изображения на веб-страницу нужно использовать тег <img>. Изображение из тега <img> может быть ссылкой. Для этого нужно обвернуть тег <img> тегом ссылки <a>. Так как <img> является строчным, то рекомендуется располагать его внутри блочного элемента, например, внутри <p> или <div> (подробно строчные и блочные элементы будут рассмотрены в уроке 3.4 Box-model модуля CSS).

HTML тег <img> имеет два обязательных атрибута:

src Адрес файла картинки
alt Альтернативный текст, который будет отображен, если картинка не может быть загружена.

Таким образом, элемент <img> — это изображение и его резервный контент, который добавляется с помощью атрибута alt (мы рассмотрим этот атрибут ниже). Значение обязательного атрибута src — это абсолютный или относительный путь к изображению

Атрибут alt позволяет добавить альтернативный текст, который выводится, если изображение не отображается. Значение атрибута alt может быть обработано программами для чтения с экрана. Таким образом, кто-либо, «прослушивающий» веб-страницу, может «услышать» элемент. Атрибут alt может также пригодиться, когда изображение не может быть отображено, потому что его не существует.

Размеры изображения 
А знаете ли вы, что если не установить размеры изображения (картинки), то рисунок отобразиться на веб-странице в своих реальных размерах?
Исправить эту ситуацию помогут атрибуты width и height. Если вы установите значение только одного атрибута, то значение второго будет вычислено автоматически, чтобы сохранить пропорции рисунка. По умолчанию эти значения задаются в пикселях (в HTML коде они опускаются).
Использование этих атрибутов является хорошей практикой. Браузеру не нужно вычислять размер загружаемых картинок, он сразу резервирует для них место. Эти атрибуты называют презентационными. Они перекрываются любой другой информацией о стилях.

Текстовые элементы, атрибуты (фразовый контент)
Фразовый контент может состоять из ссылок, терминов, сокращений, цитат и других фраз. Их обозначают с помощью фразовых тегов, которые отвечают за форматирование. Форматирование бывает визуальным и логическим.

рактически всем фразовым тегам по умолчанию в браузерах заданы стили. Хотя напрямую за визуальное форматирование отвечает CSS.
Теги визуального форматирования <p>, <i>, <b>, <u>.
Теги логического форматирования <em>, <strong>, <address>, <code>, <time>, <q> и др.

Тег <p> определяет текстовый абзац. Является блочным элементом и всегда начинается с новой строки. Абзацы текста, идущие друг за другом, разделяются между собой отступом. Если закрывающего тега нет, считается, что конец абзаца совпадает с началом следующего блочного элемента.

Тег <span> предназначен для определения строчных элементов документа. <span> не семантический тег и влияет только на внешний вид элементов, если ему заданы стили. С его помощью можно выделить часть информации внутри других тегов и установить для нее свой стиль.
Например: внутри абзаца (тега <p>) можно выделить часть текста <span> и определить для него другой цвет текста. Для этого тега доступны универсальные атрибуты и события.

Устанавливает курсивное начертание шрифта (italic).
Устанавливает полужирное начертание шрифта (bold).
Тег <em> (emphasis) предназначен для акцентирования текста, выделения слова интонацией для усиления эмоциональной выразительности. Обычно в тег <em> оборачивают одно или два слова. Если информация срочная или автор настаивает на своей точке зрения, то <em> можно выделить всё предложение. Браузеры отображают такой текст курсивным начертанием.

Элемент сильной значимости <strong> предназначен для контента, который имеет большое значение, включая вещи большой важности (например, предупреждения). Это может быть предложение, которое имеет большое значение для всей страницы. Или вы можете просто попытаться указать, что некоторые слова имеют большее значение по сравнению с соседним контентом. Браузеры обычно отображают содержимое жирным шрифтом.

Спецсимволы HTML — это языковые конструкции, которые используют набор символов из специальных текстовых файлов. Иногда на странице требуется добавить символ, которого нет в стандартной раскладке клавиатуры. Это можно сделать путем добавления кода или обозначения символа в месте, где он требуется.

L2.4 HTML Lists
